## Features

- Measures  temperature and humidity.

- Convenient Local GUI interface

- Connects via WiFI to local LAN

- Accessible via Web Interface using

  - HTTP pages
  - REST interface

-  Can be targeted to a variety of ESP8266 or ESP8265 platforms such as 

  - NodeMCU (4MB/1MB FS)
  - Sonoff (1MB/128kB FS) 

- Supports multiple sensor types:

  - one or two DS18B20 using a single wire interface (Vcc GND SDA)
  - the DHT22 temperature and humidity sensor using a propriatory single wire interface (Vcc GND SDA)
  - the HUT31 temperature and humidity sensor using a standard I2C interface

- Sensors can be selected are runtime via

  - Serial command line interface (the `sensor` command) 
  - MegunoLink GUI interface (using three pushbuttons)
  - REST interface
  - WEB CLI interface

  

## Code Reference

This section is an overview of the code. Describes the various modules and flows

#### setup()

The main setup initializes all global parameters such as WiFi parms, and User parms. A standardized template for global parameters is followed in myGlobals.h. The `myp.initAllParms()` method does the heavy lifting, i.e. checks the integrity of EEPROM, and if good, fetches all working parameters. It also initializes the volatile (aka state) variables. If not good, installs into the EEPROM the default version of parameters.

Next installs the CLI table using the `exe.registerTable()` method which allows execution of commands entered either via the console (Serial interface) or via the Web interface

The `startCLIAfter()`function is used to optionally start the command line interface without activating the WiFi and the main loop. This allows checking most of the sensor functionality, improving the local GUI interface, forcing initialization of the EEPROM, examining and modifying default parameters, etc. A hard reset is 

Subsequently, the selected sensor is initialized. In case of DS18, the number of devices is discovered on the single wire bus using the  `temp.search()` method. In case of the HTU, the initialization method `htu.init()` is used.

The WiFi interface is started using the `setupSTA()` function which uses the EEPROM parameters to infer to the SSID and password. It optionally fixes the IP address or defaults to the DHCP discovery. In addition, it activates the mDNS discovery using a label easily discoverable in the local LAN.

Finally, the Web server is activated starting with the registration of the end points. The `srvCallbacks()` activate the most often used end points most of which not requiring any `.htm` files in the filesystem. The `cliCallbacks()` function is used to connect the console CLI via REST interface or an HTML page.

